

MongoDB es un sistema de bases de datos NoSQL que almacena datos en un formato similar a JSON llamado BSON (Binary JSON). Es conocido por ser escalable, flexible y adecuado para manejar grandes volúmenes de datos no estructurados o semi-estructurados.


MODELO DE DATOS:

SQL: Usa un modelo relacional, donde los datos se organizan en tablas con filas y columnas. Las relaciones entre las tablas se definen mediante claves primarias y foráneas.
NoSQL: Utiliza modelos más flexibles, como documentos (por ejemplo, en MongoDB), clave-valor, grafos o columnas. No es necesario definir un esquema rígido, lo que permite una mayor flexibilidad.

2. Estructura de datos:
SQL: Los datos deben seguir una estructura predefinida, es decir, el tipo de cada campo debe definirse al crear la base de datos.
NoSQL: Los datos no tienen una estructura fija. Pueden ser documentos JSON, valores clave, o datos organizados de manera libre.

3. Escalabilidad:
SQL: Escala principalmente de forma vertical (aumentando la capacidad del servidor).
NoSQL: Escala de manera horizontal (añadiendo más servidores o nodos), lo que lo hace más adecuado para manejar grandes cantidades de datos distribuidos.

4. Consultas:
SQL: Usa el lenguaje SQL para consultas complejas. Es potente y permite realizar uniones (JOINs) entre tablas.
NoSQL: Depende del tipo de base de datos, pero generalmente las consultas son más simples y menos estructuradas. No todas las bases de datos NoSQL soportan operaciones complejas como los JOINs.

5. Transacciones:
SQL: Proporciona ACID (Atomicidad, Consistencia, Aislamiento, Durabilidad), lo que garantiza que las transacciones sean seguras y consistentes.
NoSQL: Muchas bases de datos NoSQL priorizan el rendimiento y la escalabilidad, por lo que no siempre garantizan ACID, aunque algunas ofrecen configuraciones de transacciones en un alcance limitado (por ejemplo, MongoDB con Multi-Document Transactions).

6. Casos de uso:
SQL: Ideal para aplicaciones con datos estructurados, como sistemas de gestión de relaciones (CRM), ERP, y aplicaciones financieras donde las relaciones entre datos son clave.
NoSQL: Mejor para aplicaciones con grandes volúmenes de datos no estructurados o semi-estructurados, como redes sociales, big data, análisis en tiempo real o aplicaciones móviles.

7. Ejemplos:
SQL: MySQL, PostgreSQL, Microsoft SQL Server, Oracle DB.
NoSQL: MongoDB, Cassandra, CouchDB, Redis, Firebase.
En resumen, las bases de datos SQL son más adecuadas para aplicaciones con datos muy estructurados y relaciones complejas, mientras que NoSQL ofrece flexibilidad y escalabilidad para manejar grandes volúmenes de datos no estructurados.



Básicamente, SQL trabaja con columnas y tablas, centralizando todo ahí dentro. Es una base de datos estructurada, que tiene lo que necesita tener. Es decir, tiene un esquema predefinido y relaciones entre los datos a través de claves primarias y foráneas. Debido a esta estructura rígida, no es tan apta para escalar horizontalmente como las bases de datos NoSQL.

En cambio, MongoDB no es relacional. Es decir, no usa tablas ni relaciones fijas entre los datos. En lugar de eso, utiliza documentos en formato JSON, que pueden tener diferentes estructuras y campos. Esto le da mucha más flexibilidad y la hace más apta para manejar grandes volúmenes de datos no estructurados o semi-estructurados. Además, MongoDB puede escalar de manera más eficiente horizontalmente, agregando más nodos según sea necesario.

Mientras que SQL es ideal para sistemas que requieren integridad de datos y relaciones complejas entre entidades (como aplicaciones bancarias o de inventarios), MongoDB y otras bases de datos NoSQL son mejores para aplicaciones que manejan grandes volúmenes de datos, como redes sociales, IoT o análisis de big data.



TIPOS DE BASE DE DATOS NoSQL

Clave-valor: Este tipo de base de datos almacena los datos como un par de clave y valor. Cada valor se asocia a una clave única, y es muy eficiente para buscar datos cuando conoces la clave. Es ideal para aplicaciones que necesitan almacenamiento rápido y simple, como cachés o configuraciones de usuario.

Documentales: En este tipo de base de datos, los datos se almacenan como documentos (normalmente en formato JSON o BSON). Cada documento puede tener diferentes campos y estructuras, lo que da mucha flexibilidad. MongoDB es un ejemplo de base de datos documental. Son útiles cuando los datos no tienen un esquema fijo o cambian con frecuencia.

Grafos: Las bases de datos de grafos están diseñadas para almacenar datos interconectados. Utilizan nodos, aristas y relaciones para representar la estructura de los datos. Son ideales para aplicaciones donde las relaciones entre los datos son clave, como redes sociales, recomendaciones y análisis de rutas.

Columnas: Las bases de datos basadas en columnas almacenan los datos en formato de columnas en lugar de filas, como en las bases de datos tradicionales SQL. Cada columna puede contener una gran cantidad de datos relacionados, lo que hace que sean muy eficientes para consultas analíticas sobre grandes volúmenes de datos. En lugar de leer filas completas (como en una base de datos relacional), solo se leen las columnas que realmente se necesitan, lo que mejora el rendimiento en ciertos casos.



INSTALACION DE MONGODB


WINDOWS

Vale, la instalacion es un poco tiquismiquis pero se puede

Ir a: "https://www.mongodb.com/try/download/community" y bajar hasta encontrar el boton "Download", podemos ingresar que tipo de instalacion queremos, yo escogi la msi por facil, y nos lo bajamos, luego instalamos el wizard, muy importante si lo quires como servicio o no, como servicio es que cada vez que ingreses a la maquina tendras al demonio mongod corriendo predeterminadamente, o bien si quieres no estar corriendolo hasta que lo habras tambien puedes, yo lo he hecho si servicio, tambien nos podemos instalar el compass, pero da igual porque luego se puede instalar tambien.

Luego de esperar y alomejor dar consentimientos de algunas cosas tenemos que bajarnos la mongosh, la shell, en: "https://www.mongodb.com/try/download/shell" ingresamos las cosas y facil de instalar, yo he escojido msi, que es mas facil y automatico, tambien tenemos que ir a "C:\" y crear "data\db", vamos que tenemos que tener "C:\data\db" porque sino mongod no funcionara, luego de todo eso en "C:\Program Files\MongoDB\Server\8.0\bin" habra principalmente "mongod" que es el demonio, si eso no corre no nos conectara, lo ejecutamos y nos quedamos tranquilos, ya que el demonio esta listo nos podemos ir al "CMD" y podemos poner "mongosh" y veras que sale lo siguiente:

mongosh
Current Mongosh Log ID: 6761560c284f41d56779a1b5
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.6
Using MongoDB:          8.0.4
Using Mongosh:          2.3.6

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-12-17T11:44:18.959+01:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
   2024-12-17T11:44:18.960+01:00: This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip <address> to specify which IP addresses it should serve responses from, or with --bind_ip_all to bind to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to disable this warning
------

test>

Ya esta, ya estamos dentro, si no tenemos mongod arrancado saldria esto:

mongosh
Current Mongosh Log ID: 6761569bde1b27e5a079a1b5
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.6
MongoNetworkError: connect ECONNREFUSED 127.0.0.1:27017

Que no se puede conectar vamos, y tu estaras pensado, joder tengo que ir cada vez que quiera trabajar con mongodb tengo que ir a "C:\Program Files\MongoDB\Server\8.0\bin" y ejecutar el mongod, pues no, nos iremos al buscador y windows y pondremos "editar las variables de entorno del sistema" abajo en "Variables de entorno", clickaremos "Path" y luego "editar", "nuevo" y ponemos "C:\Program Files\MongoDB\Server\8.0\bin\", luego aceptamos todo y eso creara una variable para que no tengas que ir todo el rato a "C:\Program Files\MongoDB\Server\8.0\bin", con esa variable solo escribre "mongod" en el CMD y arrancara el demonio, luego en otra pestaña escribes "mongosh" y listo 



LINUX(Ubuntu):

Nos vamos a "https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/#std-label-install-mdb-community-ubuntu" para ver la documentacion(igualmnte pondre los comandos)

    -sudo apt-get install gnupg curl

    -curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
    sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
    --dearmor

    #dale "s"
    #si no se encuentra la comanda "curl" instala con "sudo apt install curl", y vuelve a poner el segundo comando

Selecciona tu distribucion de ubuntu

    -echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list

    -sudo apt-get update

    -sudo apt-get install -y mongodb-org

    -ps --no-headers -o comm 1 #depende del que te salga tendras que tomar una opcion u otra en el comando de abajo

    -sudo systemctl start mongod #o sudo service mongod start

    -sudo systemctl start mongodb

    -sudo systemctl enable mongodb

    -mongosh


PRIMEROS PASOS EN MONGODB:

CREAR UNA BASE DE DATOS:
    -use NuevaBaseDeDatos
    switched to db NuevaBaseDeDatos

El use es para usar, pero si la db "NuevaBaseDeDatos" no existe mongodb la creara    

MOSTRAR LAS BASES DE DATOS:
    -show dbs
    admin    40.00 KiB
    config  108.00 KiB
    local    72.00 KiB

La db "Test" no es una db en si, es al principio donde nos posiciona para luego decidir cual es nuestro proximo movimiento, cuando salgas de "Test", esta no vuelve a salir    

*Aclaracion

No veras la base de datos que has creado hasta que haya colecciones dentro de ella

VER EL NOMBRE DE LA BASE DE DATOS EN USO:
    -NuevaBaseDeDatos> db.getName()
    NuevaBaseDeDatos

Tambien puedes usar:
    -test> db
    test
    test> use NuevaBaseDeDatos
    switched to db NuevaBaseDeDatos
    NuevaBaseDeDatos> db
    NuevaBaseDeDatos
    NuevaBaseDeDatos>

APAGAR EL SERVIDOR:
    -db.shutdownServer()


CREATE

CREACION DE COLECCION

Una vez "creada"(porque no se crea hasta que ingreses datos) la db hay que ingresar la coleccion:
    -db.nombredelacoleccion.insertOne()

Vamos a desglosarlo, el "db" hace referencia a la db donde estamod, en este caso "NuevaBaseDeDatos", el "nombredelacoleccion" es el nombre que queramos darle a la coleccion, y el "insertOne()" ya si es la funcion de ingresar, entonces podemos poner algo como:

    -NuevaBase> db.usuarios.insertOne({nombre: "Alfredo", edad: 15}) //No lo he dicho pero tiene que tener formato JSON
    {
    acknowledged: true,
    insertedId: ObjectId('6762a3599715157f0579a1ba')
    }
    NuevaBase>

Y ahora si se vera la db "NuevaBase"
    -show dbs
    NuevaBase  40.00 KiB
    admin      40.00 KiB
    config     96.00 KiB
    local      72.00 KiB    

Aunque lo veas desde "Test"
    -test> show dbs
    NuevaBase  40.00 KiB
    admin      40.00 KiB
    config     96.00 KiB
    local      72.00 KiB
    test>

 Para ver las colecciones que tenemos en una db usamos:
    -show collections

Cuidado si usas "show collections" en una db que no tenga o en "Test" sino no te saldra nada:
    -test> show collections

    test>

Hay que usarlo dentro de la db:
    -test> use NuevaBase
    switched to db NuevaBase
    NuevaBase> show collections
    usuarios
    NuevaBase>


VER CONTENIDO DE LA DB:
    -NuevaBase> db.usuarios.find() //El find encuentra
    [
    {
        _id: ObjectId('6762a3599715157f0579a1ba'),
        nombre: 'Alfredo',
        edad: 15
    }
    ]
    NuevaBase>

CREAR UNA COLECCION VACIA:

    -NuevaBase> db.createCollection("Nueva_Coleccion")
    { ok: 1 }
    NuevaBase> show dbs
    NuevaBase    8.00 KiB
    admin       40.00 KiB
    config     108.00 KiB
    local       72.00 KiB


COMENTAR:

Se puede comentar asi "//" o "/**/" para bloque, selecciona y copia el codigo de abajo:
    -show dbs //mostrar databases

*ACLARACION:

Si creas un coleccion ya se vacia o con datos, no dejes espacios en ellos porque pasara algo como esto:
    -NuevaBase> db.createCollection("Nueva Coleccion")
    { ok: 1 }
    NuevaBase> show collections
    Nueva Coleccion
    NuevaBase> db.Nueva Coleccion.find()
    Uncaught:
    SyntaxError: Missing semicolon. (1:8)

    > 1 | db.Nueva Coleccion.find()
        |         ^
      2 |

Y para borrarla tiene tela porque no le vale esto:
    -db.Nueva Coleccion.drop() //el drop ya lo veremos mas adelante
    Uncaught:
    SyntaxError: Missing semicolon. (1:8)

    > 1 | db.Nueva Coleccion.drop()
        |         ^
      2 |

Tines que hacer esto:
    -db["Nueva Coleccion"].drop()
    true
    NuevaBase> show collections

    NuevaBase>


ID:

Cada documento tiene su id aunque no se lo pongamos nosotro mongodb ya se encargara de ponerlo:
    -NuevaBase> db.usuarios.insertOne({nombre: "Claka", edad: 18}) //no le decimos nada de id:
    {
    acknowledged: true,
    insertedId: ObjectId('6762ae45474b8ec7c679a1b6') //mongodb ha visto que no tenemos un campo llamado id, asique nos lo crea el
    }
    NuevaBase> db.usuarios.find()
    [
    {
        _id: ObjectId('6762ae45474b8ec7c679a1b6'), //se ve como este id y el de arriba es el mismo
        nombre: 'Claka',
        edad: 18
    }
    ]


VARIABLES

Podemos crear nuestra propias variables en mongodb y luego insertarlas como si de JavaScript se refiere:

    -NuevaBase> let = documento = { _id: 1, nombre: "Teresa", edad: 67 }
    { _id: 1, nombre: 'Teresa', edad: 67 }
    -NuevaBase> documento
    { _id: 1, nombre: 'Teresa', edad: 67 }
    -db.usuarios.insertOne(documento)
    { acknowledged: true, insertedId: 1 }
    NuevaBase> db.usuarios.find()
    [
    {
        _id: ObjectId('6762ae45474b8ec7c679a1b6'),
        nombre: 'Alex',
        edad: 18
    },
    { _id: 1, nombre: 'Teresa', edad: 67 }
    ]
    NuevaBase>
    

*ACLARACION    

Siempre hemos podido poner el "_id", no solo es en la creacion de variables


Que pasara si volvemos a insertar la variable con el mismo "_id"?:
    -NuevaBase> db.usuarios.insertOne(documento)
    MongoServerError: E11000 duplicate key error collection: NuevaBase.usuarios index: _id_ dup key: { _id: 1 }
    NuevaBase>

Pues que no deja



READ

    -db.usuarios.find() //ver toda la db
    -db.usuarios.find({}) //ver toda la db
    -db.usuarios.find({nombre: "Carlos"}) //ver los documento cuyo nombre se "Carlos", si no lo encuentra no devuelve nada

Cuando tienes mas de 20 documento y intentas verlos con "db.usuarios.find()" solo te mostrara los primeros 20, por si en la db tienes miles de documentos no sobresaturarlo, pero puedes hacer "db.usuarios.find().toArray()" para mostrarlos todos aunque sea una mala practica, en su lugar puedes hacer:
    -db.usuarios.find().forEach(empleadoData => { printjson(empleadoData)})

Filtrar por solo un campo:
    -db.usuarios.find({},{nombre: 1}) //solo te mostrara los 20 primeros
    -db.usuarios.find({},{nombre: 1}).toArray() //TODOS

El _id sale por defecto pero podemos quitarlo tambien:
    -db.usuarios.find({},{nombre: 1, _id: 0})  


Filtrar por anidamiento:
    venta: {
      pago: 'Efectivo',
      monto: 5,
      detalle: { responsable: 'Alex Serrano' }
    }
    -db.usuarios.find({"venta.detalle.responsable": "Alex Serrano"}) //usar las ""    

El _id sale por defecto pero podemos quitarlo tambien:
    -db.usuarios.find({},{nombre: 1, _id: 0})    


ordered inserts:

Es cuando ya tiene un documento con ese _id: X, y intentas ponerle otro igual junto a mas documentos, te saldra un error y no te deja insertar ninguno, aunque el otro tenga un id valido.

Ehemplo:

Tenemos 2 documentos, uno con "el _id: 1" y el otro con el "_id: 2"
[ { _id: 1, nombre: 'Patricias' }, { _id: 2, nombre: 'Agustin' } ]

 y hago esto:
    -db.prueba.insertMany([{_id: 1, nombre: "Pedro"}, {_id: 3, nombre: "Bartolo"}])
    Uncaught:
    MongoBulkWriteError: E11000 duplicate key error collection: NuevaBase.prueba index: _id_ dup key: { _id: 1 }
    Result: BulkWriteResult {
    insertedCount: 0, //no ha insertado nada
    matchedCount: 0,
    modifiedCount: 0,
    deletedCount: 0,
    upsertedCount: 0,
    upsertedIds: {},
    insertedIds: {}
    }
    Write Errors: [
    WriteError {
        err: {
        index: 0,
        code: 11000,
        errmsg: 'E11000 duplicate key error collection: NuevaBase.prueba index: _id_ dup key: { _id: 1 }',
        errInfo: undefined,
        op: { _id: 1, nombre: 'Pedro' }
        }
    }
    ]

Un error de duplicidad por parte del "_id: 1" que intentamos insertar, pero que pasa?, que el "_id: 3" no tiene culpa y no se ha insertado, para eso esta el ordered, por defecto esta en "true" pero nosotros lo queremos en "false" para que funcione
    -db.prueba.insertMany([{_id: 1, nombre: "Pedro"}, {_id: 3, nombre: "Bartolo"}], {ordered: false})
    Uncaught:
    MongoBulkWriteError: E11000 duplicate key error collection: NuevaBase.prueba index: _id_ dup key: { _id: 1 }n //da el error de duplicado
    Result: BulkWriteResult {
    insertedCount: 1, //pero vemos que ha insertado un documento
    matchedCount: 0,
    modifiedCount: 0,
    deletedCount: 0,
    upsertedCount: 0,
    upsertedIds: {},
    insertedIds: { '1': 3 }
    }
    Write Errors: [
    WriteError {
        err: {
        index: 0,
        code: 11000,
        errmsg: 'E11000 duplicate key error collection: NuevaBase.prueba index: _id_ dup key: { _id: 1 }',
        errInfo: undefined,
        op: { _id: 1, nombre: 'Pedro' }
        }
    }
    ]
    NuevaBase> db.prueba.find()
    [
    { _id: 1, nombre: 'Patricias' },
    { _id: 2, nombre: 'Agustin' },
    { _id: 3, nombre: 'Bartolo' }
    ]  


PROFUNDIZANDO CON OPERACIONES READ


UPDATE:

Vamos a ponerle una nueva clave llamada "etiqueta" al primero que se llame "Alex"

    -NuevaBase> db.usuarios.find()
    [
    {
        _id: ObjectId('6762ae45474b8ec7c679a1b6'),
        nombre: 'Alex',
        edad: 18
    },
    { _id: 1, nombre: 'Teresa', edad: 68 }
    ]
    NuevaBase> db.usuarios.updateOne({nombre: "Alex"}, { $set: {etiqueta: "atendido"}})
    {
    acknowledged: true,
    insertedId: null,
    matchedCount: 1,
    modifiedCount: 1,
    upsertedCount: 0
    }
    NuevaBase> db.usuarios.find()
    [
    {
        _id: ObjectId('6762ae45474b8ec7c679a1b6'),
        nombre: 'Alex',
        edad: 18,
        etiqueta: 'atendido'
    },
    { _id: 1, nombre: 'Teresa', edad: 68 }
    ]
    NuevaBase>

Si quieres poner una nueva clave-valor, eliminarla o editarla:

NuevaBase> db.usuarios.find()
[
  {
    _id: ObjectId('6762ae45474b8ec7c679a1b6'),
    nombre: 'Alex',
    edad: 18,
    etiqueta: 'atendido',
    trabajo: true
  }
]
NuevaBase> db.usuarios.updateOne(
...   { nombre: "Alex" },
...   { $unset: { edad: "" } }
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
NuevaBase> db.usuarios.find()
[
  {
    _id: ObjectId('6762ae45474b8ec7c679a1b6'),
    nombre: 'Alex',
    etiqueta: 'atendido',
    trabajo: true
  }
]


Tambien puedes actualizar por el "ObjectID":

    -db.usuarios.updateOne({ _id: ObjectId('676412da0251d01c9379a1b7') }, { $set: { nombre: "Mariano" }})


DELETE 

El metodo deletOne() y deletMany() borra documentos, no borra una clave-valor, borra el documento en si

    -db.usuarios.deleteMany({}) //borra toda la base
    -db.usuarios.deleteOne({}) //borra el primer documento de la db
    -db.usuarios.deleteOne({nombre: "Maria"}) //Borra el documento de maria, NO SOLO BORRA EL NOMBRE "MARIA", eso en update


ARRAYS

En los documentos se pueden tener arrays tambien:
    -db.empleados.insertOne({nombre: "Marcus Ortega", email: "marcus@example.com", empleado: "si", diasLaborables: ["Sabado", "Domingo"]})
    -db.empleados.updateOne({nombre: "Lewis Coleman"}, { $set : {diasLaborables: ["Lunes", "Martes", "Miercoles", "Jueves", "Viernes"]}})

Filtrar por arrays:
    -db.empleados.findOne({nombre: "Marcus Ortega"}).diasLaborables //tiene que ser el mismo nombre proporcionado en el documento
    -


DESCARGAR MONGOIMPORT WINDOWS:

En "https://www.mongodb.com/try/download/database-tools" elegimos la opcion de msi

Vamos a "C:\Program Files\MongoDB\Tools\version\bin", hay estan los archivos que tenemos que pasar a "C:\Program Files\MongoDB\Server\version\bin"

Poneros cada ventana del "Explorador de archivos" y ir copiando a la "C:\Program Files\MongoDB\Server\version\bin"

*Aclaracion:

Lo que hemos hecho es para poder importar documentos de nuestras maquinas al servidor, NO FUNCIONA LA COMANDa "mongoimport" DENTRO DEL SERVIDOR, es como "mongod" que se tiene que hacer el "CMD".

Comando:
    -mongoimport .\product.json -d product -c productData --jsonArray --drop

mongoimport: la opcion de importar
.\product.json: el archivo que queremos importar
-d product: a la database product //si no existe la crea
-c productData: a la coleccion productData //si no existe la crea
--jsonArray: si el archivo tiene Array //si los tiene y lo pones no funcionara
--drop: Si existe la base de datos la eliminara y hara el comando



OPERADORES

$eq: Igual que - db.LosProductos.find({productName: {$eq: "Chai"}}) // es lo mismo que - db.LosProductos.find({productName: "Chai"})

$ne: Diferente de - db.LosProductos.find({branchOffice: {$ne: "Florida"}})

$gt: Mayor que - db.LosProductos.find({unitsInStock: { $gt: 43}}) //mayor que 43, el 43 no incluido

$gte: Mayor o igual que - db.LosProductos.find({unitsInStock: { $gte: 43}}) //mayor o igual a 43, 43 incluido

$lt: Menor que - db.LosProductos.find({unitsInStock: { $lt: 43}}) //menor que 43, 43 no incluido

$lte: Menor o igual que - db.LosProductos.find({unitsInStock: { $lte: 43}}) //menor o igual a 43, 43 incluido

$in: Valor en una matriz - db.LosProductos.find({branchOffice: {$in: ["Florida"]}}) // es lo mismo que - db.LosProductos.find({branchOffice: "Florida"})

$nin: Valor no está en una matriz/Array - db.LosProductos.find({branchOffice: {$nin: ["Florida", "California", "Ohio"]}})


OPERACIONES LOGICOS

$and: une dos valores si son verdaderos - db.LosProductos.find({ $and: [{ "discountDay.Monday": { $gt: 0.25 } }, { branchOffice: "Florida" }] }, { "discountDay.Monday": 1, branchOffice: 1 }) //es lo mismo que db.LosProductos.find({ "discountDay.Monday": { $gt: 0.25 }, branchOffice: "Florida" }, { "discountDay.Monday": 1, branchOffice: 1 }) //esta buscando los documentos que el discountDay.Monday sera mayor a 0.25 y que este en la sucursal de Florida, junto a unas proyecciones

$or: une dos valores si alguno de ellos es verdadero - db.LosProductos.find({$or: [{"categories.categoryName": {$eq: "Confections"}}, {"categories.categoryName": {$eq: "Produce"}}]})

$not: niega la condición dada, selecciona documentos donde no se cumpla - db.LosProductos.find({branchOffice: {$not: {$in: ["California", "Misuri"]}}},{branchOffice: 1}) 

$nor: selecciona documentos donde NINGUNA de las condiciones sea verdadera(basicamente en un $and pero los 2 valores tienen que ser falsos, lo contrario del $and) - db.LosProductos.find({ $nor: [{ branchOffice: "California" }, { branchOffice: "Misuri" }] }, { branchOffice: 1 })


OPERACIONES DE CONSULTA

$exist: Busca en un documento si exixte/o no la clave que queramos - db.empleados.find({ age: {$exists: true}}) // tambien puedes poner false para buscar por los que no existan(he hecho esto por diversion: db.empleados.find({ age: {$not: {$exists: true}}})), es lo mismo que db.empleados.find({ age: {$exists: false}})

$type: verifica el tipo de dato - db.empleados.find({homePhone: {$type: "number"}}), puedes hacer que filtre X2 tambien: db.empleados.find({homePhone: {$type: ["number", "string"]}})

ACLARACION

Aunque "db.empleados.find({$and: [{age: {$exists: true}}, {age: {$gt: 35}}]})" y "db.empleados.find({ age: {$exists: true, $gt: 35}})" hagan lo mismo yo te recomiendo el segundo porque como ya hemos dicho cuando hacemos un db.empleados.find({},{}) es 


OPERADORES DE EVALUACION

$regex: busca patrones en cadenas de texto usando expresiones regulares - db.empleados.find({description: {$regex: "travel"}}) //salen todos los documentos que tengan la palabra "travel"


    -db.empleados.find({title: {$regex: "support"}})
Puedes añadir opciones a las busquedas con $regex con $options($options SOLO ESTA SI USAS $regex, NO SE PUEDE USAR SINO), el comando de arriba solo busca exactamente por "support" pero podemos hacer que no:

    -db.empleados.find({title: {$regex: "support", $options: "i"}})

Para que acaben con una letra o palabra determinada:
    -db.empleados.find({ firstName: { $regex: "y$" } } )  

Tambien puedes buscar caracteres asi:
    -db.empleados.find({ description: /loves/ })

$expr: Permite usar expresiones que comparan valores de campos o realizan cálculos - db.empleados.find({$expr: {$lt: ["$delay", "$tolerance"]}}) //estara devolviendo los documentos que $delay no sea mayor a $tolerance  //tambien puedes usar $eq, $gt, $ne,         

$mod: No se muy bien lo que hace - db.empleados.find({ age: { $mod: [2, 0] } }) //devuelve los documento que age sea par, solo coje el entero, un $mod: [2.66, 0] NO, cojeria solo el primero, el 2


OPERACIONES DE ARRAYS

$all: verificar si un campo de tipo arreglo contiene todos los valores especificados - db.empleados.find({state: {$all: ["Florida", "Ohio"]}}) //igual que: db.empleados.find({$and: [{state: {$eq: "Florida"}}, {state: {$eq: "Ohio"}}]})

$elemMatch: coincide con documentos que contienen un campo de matriz con al menos un elemento que coincide con todos los criterios de consulta especificados. - db.empleados.find({hobbies: {$elemMatch: {title: "Dance"} }}) //tambien: db.empleados.find({hobbies: {$elemMatch: {title: "Voley", frequency: {$gte: 3}}}})

$size: verificar la cantidad de elementos en un arreglo/array - db.empleados.find({hobbies: {$size: 2}}) //tambein: db.empleados.find({state: {$size: 5}})



METODO CURSOR

.next(): mite obtener un solo documento a la vez del cursor, lo que da más control sobre la iteración, ya que debes llamarlo repetidamente para acceder a cada documento. Por otro lado, .it (utilizado en la shell interactiva de MongoDB) permite recorrer automáticamente todos los documentos del cursor, devolviendo uno a uno sin necesidad de llamarlo explícitamente cada vez, lo que facilita iterar sobre todos los resultados sin control manual.

.hasNext(): Devuelve un booleado de si puedes hacer otro .next() o no, es solo informativo

.sort(): Devuelve los documentos ordenados - db.LosProductos.find().sort({id: 1})//Los ordena ascendente, si quieres que sea descente es con "-1"

.toArray(): Devuelve todos los documentos del la db especificados

.skip(): Omite los primeros X documentos de la consulta - db.LosProductos.find().sort({ id: 1 }).skip(10) //se ordenan en ascendente pero se omiten los 10 primeros:

    -db.LosProductos.find().sort({ id: 1 }).skip(10).toArray()
[
  {
    _id: ObjectId('6767fdfa2e58910481c31b8e'),
    id: 11, //empieza por el id 11

.limit(): Limita el número de documentos que se devuelven a X - db.LosProductos.find().sort({ id: 1 }).skip(10).limit(15) //se ordenan en ascendente pero se omiten los 10 primeros y solo habra 15 documentos

.count():




